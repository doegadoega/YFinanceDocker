AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'YFinance API - 株式データ取得API'

Globals:
  Function:
    Timeout: 60
    MemorySize: 1024
    Environment:
      Variables:
        PYTHONPATH: /opt/python

Resources:
  YFinanceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes:
        - image/png
      Cors:
        AllowMethods: "'GET,POST,PUT,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          UserJwtAuthorizer:
            FunctionArn: !GetAtt AuthAuthorizer.Arn
            FunctionPayloadType: TOKEN
            AuthorizerResultTtlInSeconds: 0
            Identity:
              Header: Authorization
              ReauthorizeEvery: 0

  YFinanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      MemorySize: 1024
      Timeout: 60
      Architectures:
        - x86_64
      Environment:
        Variables:
          # 環境変数は後で動的に設定されるため、ここでは空にする
          API_GATEWAY_URL: ""
          USERS_TABLE: !Ref UsersTable
          JWT_SECRET: ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        # ベースURL - Swagger UI表示
        GetSwaggerUI:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /
            Method: get
        # 認証系（公開）
        AuthRegister:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /auth/register
            Method: post
        AuthLogin:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /auth/login
            Method: post
        # 認証必須エンドポイント
        GetUserMe:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /user/me
            Method: get
            Auth:
              Authorizer: UserJwtAuthorizer
        UpdateUserMe:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /user/me
            Method: put
            Auth:
              Authorizer: UserJwtAuthorizer
        SearchStocks:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /search
            Method: get
        GetTickerDetail:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /tickerDetail
            Method: get
        GetBasic:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/basic
            Method: get
        GetPrice:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/price
            Method: get
        GetHistory:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/history
            Method: get
        GetFinancials:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/financials
            Method: get
        GetAnalysts:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/analysts
            Method: get
        GetHolders:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/holders
            Method: get
        GetEvents:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/events
            Method: get
        GetNews:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/news
            Method: get
        GetNewsRss:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /news/rss
            Method: get
        GetOptions:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/options
            Method: get
        GetSustainability:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /ticker/sustainability
            Method: get
        GetHome:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /home
            Method: get
        GetChart:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /chart
            Method: get
        GetRankingsStocks:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /rankings/stocks
            Method: get
        GetRankingsSectors:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /rankings/sectors
            Method: get
        GetRankingsCrypto:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /rankings/crypto
            Method: get
        GetMarketsIndices:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /markets/indices
            Method: get
        GetMarketsCurrencies:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /markets/currencies
            Method: get
        GetMarketsCommodities:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /markets/commodities
            Method: get
        GetMarketsStatus:
          Type: Api
          Properties:
            RestApiId: !Ref YFinanceApi
            Path: /markets/status
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest

  # 独立した 認証/証券 管理用 API（YFinance とは別）
  AuthSecuritiesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          UserJwtAuthorizer:
            FunctionArn: !GetAtt AuthAuthorizer.Arn
            FunctionPayloadType: TOKEN
            AuthorizerResultTtlInSeconds: 0
            Identity:
              Header: Authorization
              ReauthorizeEvery: 0

  # Lambda オーソライザー（JWT検証）
  AuthAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      MemorySize: 256
      Timeout: 10
      Architectures:
        - x86_64
      Environment:
        Variables:
          JWT_SECRET: ""
      ImageConfig:
        Command:
          - auth_authorizer.lambda_handler
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest

  # 独立API用 Lambda 関数（auth_api.yaml に準拠）
  SecuritiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      MemorySize: 512
      Timeout: 60
      Architectures:
        - x86_64
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          JWT_SECRET: ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        # 公開（認証不要）
        UserLogin:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/login
            Method: post
        UserRegister:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/register
            Method: post
        SymbolsGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /symbols
            Method: get
        SymbolGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /symbols/{symbol}
            Method: get

        # 認証必須
        UserBaseGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/base
            Method: get
            Auth:
              Authorizer: UserJwtAuthorizer
        UserBasePut:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/base
            Method: put
            Auth:
              Authorizer: UserJwtAuthorizer
        UserBaseDeleteViaPost:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/base
            Method: post
            Auth:
              Authorizer: UserJwtAuthorizer

        UserSecuritiesGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/securities
            Method: get
            Auth:
              Authorizer: UserJwtAuthorizer
        UserSecuritiesPost:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/securities
            Method: post
            Auth:
              Authorizer: UserJwtAuthorizer
        UserSecuritiesPut:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/securities
            Method: put
            Auth:
              Authorizer: UserJwtAuthorizer
        UserSecuritiesDelete:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/securities
            Method: delete
            Auth:
              Authorizer: UserJwtAuthorizer

        UserHoldingsGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/holdings
            Method: get
            Auth:
              Authorizer: UserJwtAuthorizer

        UserFavoritesGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/favorites
            Method: get
            Auth:
              Authorizer: UserJwtAuthorizer
        UserFavoritesPost:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/favorites
            Method: post
            Auth:
              Authorizer: UserJwtAuthorizer
        UserFavoritesDelete:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/favorites/{symbol}
            Method: delete
            Auth:
              Authorizer: UserJwtAuthorizer

        UserTransactionsGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/transactions
            Method: get
            Auth:
              Authorizer: UserJwtAuthorizer
        UserTransactionsPost:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/transactions
            Method: post
            Auth:
              Authorizer: UserJwtAuthorizer
        UserTransactionsDelete:
          Type: Api
          Properties:
            RestApiId: !Ref AuthSecuritiesApi
            Path: /user/transactions
            Method: delete
            Auth:
              Authorizer: UserJwtAuthorizer
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest
    ImageConfig:
      Command:
        - securities_api.lambda_handler

  # DynamoDB ユーザーテーブル
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      TableName: !Sub "${AWS::StackName}-Users"

Outputs:
  YFinanceApiUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${YFinanceApi}.execute-api.${AWS::Region}.amazonaws.com/prod/'
    Export:
      Name: YFinanceApiUrl

  YFinanceFunctionArn:
    Description: 'YFinance Lambda Function ARN'
    Value: !GetAtt YFinanceFunction.Arn
    Export:
      Name: YFinanceFunctionArn

  YFinanceFunctionName:
    Description: 'YFinance Lambda Function Name'
    Value: !Ref YFinanceFunction
    Export:
      Name: YFinanceFunctionName

  AuthAuthorizerFunctionName:
    Description: 'AuthAuthorizer Lambda Function Name'
    Value: !Ref AuthAuthorizer
    Export:
      Name: AuthAuthorizerFunctionName

  AuthSecuritiesApiUrl:
    Description: 'Auth/Securities API Gateway endpoint URL'
    Value: !Sub 'https://${AuthSecuritiesApi}.execute-api.${AWS::Region}.amazonaws.com/prod/'
    Export:
      Name: AuthSecuritiesApiUrl

  SecuritiesFunctionName:
    Description: 'Securities Lambda Function Name'
    Value: !Ref SecuritiesFunction
    Export:
      Name: SecuritiesFunctionName
